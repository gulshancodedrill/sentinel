<?php

/**
 * @file
 * Code for the Sentinel Addresses feature.
 */

/**
 * Implements hook_views_api().
 */
function sentinel_addresses_views_api($module = NULL, $api = NULL) {
  return ['api' => '3.0'];
}

/**
 * Implements hook_cron().
 */
function sentinel_addresses_cron() {
  // Get a list of packs that we need to create address entities for.
  $pids = sentinel_addresses_get_addresses_not_updated();

  foreach ($pids as $pid) {
    $queue = \Drupal::queue('sentinel_address_format_updates');
    if (!sentinel_addresses_does_queue_item_exist($pid)) {
      $queue->createItem($pid);
    }
  }
}

/**
 * Get addresses not updated.
 *
 * @return array
 *   An Array of pids (pack ids) to be processed.
 */
function sentinel_addresses_get_addresses_not_updated() {
  $database = \Drupal::database();
  $schema = $database->schema();

  // Check if required tables exist.
  if (!$schema->tableExists('other_sentinel_addresses_mapping')) {
    return [];
  }

  // Query for samples that need address formatting.
  $query = $database->select('sentinel_sample', 'ss');
  $query->addField('ss', 'id', 'pid');
  $query->leftJoin('other_sentinel_addresses_mapping', 'sm', 'sm.sample_pid = ss.id');
  $query->isNull('sm.address_id');

  // Don't process any addresses created before the module was turned on.
  $query->condition('ss.created', '2017-06-29', '<');

  // Limit the list to 2000 items at a time.
  $query->range(0, 2000);

  return $query->execute()->fetchCol();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Tidy up the form with inline address info.
 */
function sentinel_addresses_form_sentinel_portal_sample_submission_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Move the company address info.
  if (isset($form['field_company_address'])) {
    if (!isset($form['company_details'])) {
      $form['company_details'] = ['#type' => 'fieldset'];
    }
    $form['company_details']['field_company_address'] = $form['field_company_address'];
    unset($form['field_company_address']);
    $form['company_details']['field_company_address']['#weight'] = 5;
  }

  // Move the system address info.
  if (isset($form['field_sentinel_sample_address'])) {
    if (!isset($form['system_details'])) {
      $form['system_details'] = ['#type' => 'fieldset'];
    }
    $form['system_details']['field_sentinel_sample_address'] = $form['field_sentinel_sample_address'];
    unset($form['field_sentinel_sample_address']);
    $form['system_details']['field_sentinel_sample_address']['#weight'] = 10;
  }
}

/**
 * Implements hook_entity_update().
 */
function sentinel_addresses_entity_update(\Drupal\Core\Entity\EntityInterface $entity) {
  // Check if entity is sentinel_sample and has address fields.
  if ($entity->getEntityTypeId() == 'sentinel_sample' && $entity->hasField('field_company_address') || $entity->hasField('field_sentinel_sample_address')) {
    // Track address updates for queue processing if needed.
    // This can trigger address formatting updates.
  }
}

/**
 * Implements hook_preprocess().
 */
function sentinel_addresses_preprocess(&$variables, $hook) {
  if (isset($variables['elements']['#entity_type'])) {
    $function = __FUNCTION__ . '_' . $variables['elements']['#entity_type'];
    if (function_exists($function)) {
      $function($variables, $hook);
    }
  }
}

/**
 * Preprocess Address entities before rendering.
 *
 * @see sentinel_addresses_preprocess()
 */
function sentinel_addresses_preprocess_address(&$variables) {
  if (!isset($variables['elements']['#bundle']) || $variables['elements']['#bundle'] != 'address') {
    return;
  }

  if (isset($variables['view_mode']) && $variables['view_mode'] != 'full') {
    return;
  }

  // Extract the entity.
  if (isset($variables['elements']['#address'])) {
    $entity = $variables['elements']['#address'];
    
    // Get address ID.
    $entity_id = $entity->id();
    
    // Embed views programmatically.
    $view_manager = \Drupal::service('entity.manager')->getViewBuilder('address');
    
    // Note: Views embedding would need to be done in templates or through
    // block/controller rendering. This is a placeholder for the concept.
    // $variables['address_view'] = views_embed_view('address_samples', 'default', $entity_id);
    // $variables['address_notes'] = views_embed_view('address_notes', 'default', $entity_id);
    
    // Form rendering moved to template or controller.
  }
}

/**
 * Check if the queue item exists or not.
 *
 * @param int $pid
 *   The sample id in the queue.
 *
 * @return bool
 *   TRUE if there is something in the queue already FALSE otherwise.
 */
function sentinel_addresses_does_queue_item_exist($pid) {
  $queue = \Drupal::queue('sentinel_address_format_updates');
  
  // Check if item exists in queue.
  // In D11, we check the queue differently.
  $queue_worker_manager = \Drupal::service('plugin.manager.queue_worker');
  $queue_name = 'sentinel_address_format_updates';
  
  // We need to check the queue differently in D11.
  // This is a placeholder - actual implementation would query the queue.
  return FALSE;
}

/**
 * Get company addresses for client IDs.
 *
 * @param array $cids
 *   The client IDs.
 * @param bool|int $address_id
 *   The address id if specified.
 *
 * @return array
 *   The results.
 */
function get_company_addresses_for_cids($cids, $address_id = FALSE) {
  $database = \Drupal::database();
  
  $query = $database->select('address__field_address', 'address');
  $query->fields('address', [
    'entity_id',
    'field_address_country_code',
    'field_address_administrative_area',
    'field_address_locality',
    'field_address_postal_code',
    'field_address_address_line1',
    'field_address_address_line2',
    'field_address_organization',
  ]);
  
  // Join with sentinel_sample.
  $query->join('address__field_address', 'aa', 'aa.field_address_value = address.field_address_value');
  $query->join('sentinel_sample__field_company_address', 'sca', 'sca.field_company_address_target_id = address.entity_id');
  $query->join('sentinel_sample', 'sample', 'sample.id = sca.entity_id');
  
  // Join with sentinel_client.
  if (\Drupal::moduleHandler()->moduleExists('sentinel_portal_entities')) {
    // Query would need proper entity references.
    // This is a simplified version.
  }
  
  $query->condition('address.bundle', 'company_address', '=');
  
  if ($address_id !== FALSE) {
    $query->condition('address.entity_id', (int) $address_id, '=');
  }
  
  return $query->execute()->fetchAll();
}

/**
 * Get sentinel sample addresses for client IDs.
 *
 * @param string $string
 *   The search string.
 * @param bool|int $address_id
 *   The address id if specified.
 *
 * @return array
 *   The results.
 */
function get_sentinel_sample_addresses_for_cids($string, $address_id = FALSE) {
  $database = \Drupal::database();
  $current_user = \Drupal::currentUser();
  
  // Get client IDs from current user.
  $cids = [];
  if (function_exists('sentinel_portal_entities_get_client_by_user')) {
    $client = sentinel_portal_entities_get_client_by_user($current_user->id());
    if ($client) {
      if (function_exists('get_more_clients_based_client_cohorts')) {
        $cids = get_more_clients_based_client_cohorts($client);
      }
      $cids[] = $client->id();
    }
  }
  
  if (empty($cids)) {
    return [];
  }
  
  if ($address_id) {
    $string = "";
  }
  
  // Query address entities.
  $query = $database->select('address__field_address', 'address');
  $query->fields('address', [
    'entity_id',
    'field_address_country_code',
    'field_address_administrative_area',
    'field_address_locality',
    'field_address_postal_code',
    'field_address_address_line1',
    'field_address_address_line2',
  ]);
  
  $query->join('sentinel_sample__field_sentinel_sample_address', 'ssa', 'ssa.field_sentinel_sample_address_target_id = address.entity_id');
  $query->join('sentinel_sample', 'sample', 'sample.id = ssa.entity_id');
  
  // Add search conditions.
  if (!empty($string)) {
    $or_group = $query->orConditionGroup();
    $or_group->condition('address.field_address_address_line1', '%' . $database->escapeLike($string) . '%', 'LIKE');
    $or_group->condition('address.field_address_address_line2', '%' . $database->escapeLike($string) . '%', 'LIKE');
    $or_group->condition('address.field_address_locality', '%' . $database->escapeLike($string) . '%', 'LIKE');
    $or_group->condition('address.field_address_postal_code', '%' . $database->escapeLike($string) . '%', 'LIKE');
    $query->condition($or_group);
  }
  
  if ($address_id !== FALSE) {
    $query->condition('address.entity_id', (int) $address_id, '=');
  }
  
  $query->range(0, 10);
  
  return $query->execute()->fetchAll();
}