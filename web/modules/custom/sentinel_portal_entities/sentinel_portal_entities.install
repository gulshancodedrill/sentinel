<?php

/**
 * @file
 * Update hooks for the Sentinel Portal Entities module.
 */

use Drupal\Core\Entity\EntityFieldManagerInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;

/**
 * Ensure newly added base fields on sentinel_sample are created/updated.
 */
function sentinel_portal_entities_update_8001() {
  $entity_type_id = 'sentinel_sample';

  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager */
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  /** @var EntityFieldManagerInterface $field_manager */
  $field_manager = \Drupal::service('entity_field.manager');
  /** @var EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::entityTypeManager();

  // Make sure the entity type itself is up to date first.
  $definition = $entity_type_manager->getDefinition($entity_type_id, FALSE);
  if ($definition) {
    $update_manager->updateEntityType($definition);
  }

  $definitions = $field_manager->getFieldStorageDefinitions($entity_type_id);

  $created = [];
  $updated = [];

  foreach ($definitions as $field_name => $definition) {
    // Try to install if missing; otherwise update.
    try {
      $update_manager->installFieldStorageDefinition($field_name, $entity_type_id, 'sentinel_portal_entities', $definition);
      $created[] = $field_name;
      continue;
    }
    catch (\Exception $e) {
      // Fall through to attempt update.
    }

    try {
      $update_manager->updateFieldStorageDefinition($definition);
      $updated[] = $field_name;
    }
    catch (\Exception $e) {
      // Ignore fields that cannot be updated automatically.
    }
  }

  return t('Base fields ensured for %entity. Created: @c Updated: @u', [
    '%entity' => $entity_type_id,
    '@c' => implode(', ', $created) ?: 'none',
    '@u' => implode(', ', $updated) ?: 'none',
  ]);
}

/**
 * Remove stray 'pid' column if it was previously added inadvertently.
 */
function sentinel_portal_entities_update_8002() {
  $table = 'sentinel_sample';
  $schema = \Drupal::database()->schema();
  if ($schema->fieldExists($table, 'pid')) {
    try {
      $schema->dropField($table, 'pid');
      return t('Dropped stray pid column from %table.', ['%table' => $table]);
    }
    catch (\Exception $e) {
      // If dropping fails, continue without fatal error.
      return t('Could not drop pid column from %table: @msg', ['%table' => $table, '@msg' => $e->getMessage()]);
    }
  }
  return t('No pid column to drop.');
}

/**
 * Add vid column to sentinel_sample table if it doesn't exist.
 */
function sentinel_portal_entities_update_8004() {
  $table = 'sentinel_sample';
  $schema = \Drupal::database()->schema();
  
  if (!$schema->fieldExists($table, 'vid')) {
    try {
      $schema->addField($table, 'vid', [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The revision ID.',
      ]);
      
      // Set vid = pid for existing records (since they're their own revision)
      $connection = \Drupal::database();
      $connection->update($table)
        ->expression('vid', 'pid')
        ->execute();
      
      return t('Added vid column to %table and populated with existing pid values.', ['%table' => $table]);
    }
    catch (\Exception $e) {
      return t('Error adding vid column to %table: @msg', ['%table' => $table, '@msg' => $e->getMessage()]);
    }
  }
  
  return t('vid column already exists in %table.', ['%table' => $table]);
}

/**
 * Add nitrate_result column to sentinel_sample table if it doesn't exist.
 */
function sentinel_portal_entities_update_8005() {
  $table = 'sentinel_sample';
  $schema = \Drupal::database()->schema();
  
  if (!$schema->fieldExists($table, 'nitrate_result')) {
    try {
      $schema->addField($table, 'nitrate_result', [
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The result of the Nitrate test.',
      ]);
      
      return t('Added nitrate_result column to %table.', ['%table' => $table]);
    }
    catch (\Exception $e) {
      return t('Error adding nitrate_result column to %table: @msg', ['%table' => $table, '@msg' => $e->getMessage()]);
    }
  }
  
  return t('nitrate_result column already exists in %table.', ['%table' => $table]);
}

/**
 * Convert created, changed, and updated columns from INT to DATETIME in sentinel_sample table.
 */
function sentinel_portal_entities_update_8006() {
  $table = 'sentinel_sample';
  $schema = \Drupal::database()->schema();
  $connection = \Drupal::database();
  
  $fields_to_convert = ['created', 'changed', 'updated'];
  $results = [];
  
  foreach ($fields_to_convert as $field_name) {
    if ($schema->fieldExists($table, $field_name)) {
      try {
        // Check current type
        $current_type = $connection->query("SHOW COLUMNS FROM {$table} LIKE '{$field_name}'")->fetchObject();
        
        if ($current_type && strpos($current_type->Type, 'int') !== FALSE) {
          // Add temporary column
          $temp_column = $field_name . '_temp';
          if (!$schema->fieldExists($table, $temp_column)) {
            $schema->addField($table, $temp_column, [
              'type' => 'datetime',
              'mysql_type' => 'datetime',
              'not null' => FALSE,
              'description' => "Temporary column for {$field_name} conversion.",
            ]);
            
            // Convert timestamp to datetime
            $connection->query("UPDATE {$table} SET {$temp_column} = FROM_UNIXTIME({$field_name}) WHERE {$field_name} IS NOT NULL AND {$field_name} > 0");
            
            // Drop old column
            $schema->dropField($table, $field_name);
            
            // Rename temp column
            $connection->query("ALTER TABLE {$table} CHANGE {$temp_column} {$field_name} DATETIME NULL");
            
            $results[] = "Converted {$field_name} from INT to DATETIME";
          }
        }
        else {
          $results[] = "{$field_name} is already DATETIME or doesn't exist";
        }
      }
      catch (\Exception $e) {
        $results[] = "Error converting {$field_name}: " . $e->getMessage();
      }
    }
    else {
      // Column doesn't exist, create it as datetime
      try {
        $schema->addField($table, $field_name, [
          'type' => 'datetime',
          'mysql_type' => 'datetime',
          'not null' => FALSE,
          'description' => "The {$field_name} datetime.",
        ]);
        $results[] = "Created {$field_name} as DATETIME";
      }
      catch (\Exception $e) {
        $results[] = "Error creating {$field_name}: " . $e->getMessage();
      }
    }
  }
  
  return t('Conversion results: @results', ['@results' => implode('; ', $results)]);
}

/**
 * Add uuid column to sentinel_sample table if it doesn't exist.
 */
function sentinel_portal_entities_update_8007() {
  $table = 'sentinel_sample';
  $schema = \Drupal::database()->schema();
  
  if (!$schema->fieldExists($table, 'uuid')) {
    try {
      $schema->addField($table, 'uuid', [
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'description' => 'The Universally Unique IDentifier.',
      ]);
      
      // Generate UUIDs for existing records
      $connection = \Drupal::database();
      $query = $connection->select($table, 'ss');
      $query->addField('ss', 'pid');
      $result = $query->execute()->fetchAll();
      
      foreach ($result as $row) {
        $uuid = \Drupal::service('uuid')->generate();
        $connection->update($table)
          ->fields(['uuid' => $uuid])
          ->condition('pid', $row->pid)
          ->execute();
      }
      
      return t('Added uuid column to %table and populated with UUIDs for existing records.', ['%table' => $table]);
    }
    catch (\Exception $e) {
      return t('Error adding uuid column to %table: @msg', ['%table' => $table, '@msg' => $e->getMessage()]);
    }
  }
  
  return t('uuid column already exists in %table.', ['%table' => $table]);
}

/**
 * Add uuid column to sentinel_client table if it doesn't exist.
 */
function sentinel_portal_entities_update_8003() {
  $table = 'sentinel_client';
  $schema = \Drupal::database()->schema();
  
  if (!$schema->fieldExists($table, 'uuid')) {
    try {
      $schema->addField($table, 'uuid', [
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
        'description' => 'The Universally Unique IDentifier.',
      ]);
      
      // Generate UUIDs for existing records
      $connection = \Drupal::database();
      $query = $connection->select($table, 'sc');
      $query->addField('sc', 'cid');
      $results = $query->execute()->fetchAll();
      
      foreach ($results as $row) {
        $uuid = \Drupal::service('uuid')->generate();
        $connection->update($table)
          ->fields(['uuid' => $uuid])
          ->condition('cid', $row->cid)
          ->execute();
      }
      
      return t('Added uuid column to %table and generated UUIDs for existing records.', ['%table' => $table]);
    }
    catch (\Exception $e) {
      return t('Could not add uuid column to %table: @msg', ['%table' => $table, '@msg' => $e->getMessage()]);
    }
  }
  return t('Uuid column already exists in %table.', ['%table' => $table]);
}

/**
 * Implements hook_schema().
 */
function sentinel_portal_entities_schema() {
  $schema = [];
  // Already defined: sentinel_client
  $schema['sentinel_client'] = [
    'description' => 'Table to store user pack data.',
    'fields' => [
      'cid' => [
        'description' => 'Primary Key: The client entity id',
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'uuid' => [
        'description' => 'The Universally Unique IDentifier.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ],
      'uid' => [
        'description' => 'The Drupal user ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ],
      'name' => [
        'description' => 'The client name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'email' => [
        'description' => 'The client email.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'api_key' => [
        'description' => 'The client API key.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
      'global_access' => [
        'description' => 'Should this key get global access to samples?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ],
      'send_pending' => [
        'description' => 'Whether pending statuses should be sent back.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ],
      'ucr' => [
        'description' => 'The UCR number.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ],
      'company' => [
        'description' => 'The client company.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
      'created' => [
        'type' => 'int',
        'description' => 'When this record was created.',
        'not null' => FALSE,
      ],
      'updated' => [
        'type' => 'int',
        'description' => 'When this record was last updated.',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['cid'],
  ];

  // Add sentinel_sample_revision table if missing
  $schema['sentinel_sample_revision'] = [
    'description' => 'Revision table of sentinel_sample (matches main table)',
    'fields' => [
      'pid' => [ 'description' => 'Pack entity id', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE ],
      'vid' => [ 'description' => 'Revision id', 'type' => 'serial', 'not null' => TRUE ],
      // Add other relevant sentinel_sample fields here. For brevity we only show the base keys; you should match D7 sentinel_sample schema as needed.
      // Duplicate all the fields from sentinel_sample. Omitting here for brevity.
    ],
    'primary key' => ['vid'],
    'indexes' => [
      'pidvid' => ['pid','vid'],
    ],
  ];
  // Add sentinel_notice table if missing
  $schema['sentinel_notice'] = [
    'description' => 'Table to store notice data.',
    'fields' => [
      'nid' => [ 'description' => 'Primary Key: The notice entity id', 'type' => 'serial', 'not null' => TRUE ],
      'uid' => [ 'description' => 'The Drupal user ID.', 'type' => 'int', 'not null' => FALSE ],
      'title' => [ 'description' => 'The title.', 'type' => 'varchar', 'length' => 255, 'not null' => TRUE ],
      'notice' => [ 'description' => 'The notice message.', 'type' => 'text', 'not null' => TRUE ],
      'notice_read' => [ 'description' => 'If this notice has been read.', 'type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'default' => 0, 'not null' => TRUE ],
      'created' => [ 'type' => 'int', 'description' => 'When this record was created.', 'not null' => FALSE ],
    ],
    'primary key' => ['nid'],
    'indexes' => [
      'nid' => ['nid'],
    ],
  ];
  // Add sentinel_portal_queue table if missing
  $schema['sentinel_portal_queue'] = [
    'description' => 'Stores items in queues.',
    'fields' => [
      'item_id' => [ 'type' => 'serial', 'not null' => TRUE ],
      'queue' => [ 'type' => 'varchar', 'length' => 255, 'not null' => TRUE ],
      'data' => [ 'type' => 'blob', 'not null' => TRUE, 'size' => 'big' ],
      'expire' => [ 'type' => 'int', 'not null' => TRUE, 'default' => 0 ],
      'created' => [ 'type' => 'int', 'not null' => TRUE, 'default' => 0 ],
    ],
    'primary key' => ['item_id'],
    'indexes' => [ 'expire' => ['expire'] ],
  ];

  return $schema;
}


