<?php

/**
 * @file
 * Update hooks for the Sentinel Portal Entities module.
 */

use Drupal\Core\Entity\EntityFieldManagerInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;

/**
 * Ensure newly added base fields on sentinel_sample are created/updated.
 */
function sentinel_portal_entities_update_8001() {
  $entity_type_id = 'sentinel_sample';

  /** @var \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface $update_manager */
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  /** @var EntityFieldManagerInterface $field_manager */
  $field_manager = \Drupal::service('entity_field.manager');
  /** @var EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::entityTypeManager();

  // Make sure the entity type itself is up to date first.
  $definition = $entity_type_manager->getDefinition($entity_type_id, FALSE);
  if ($definition) {
    $update_manager->updateEntityType($definition);
  }

  $definitions = $field_manager->getFieldStorageDefinitions($entity_type_id);

  $created = [];
  $updated = [];

  foreach ($definitions as $field_name => $definition) {
    // Try to install if missing; otherwise update.
    try {
      $update_manager->installFieldStorageDefinition($field_name, $entity_type_id, 'sentinel_portal_entities', $definition);
      $created[] = $field_name;
      continue;
    }
    catch (\Exception $e) {
      // Fall through to attempt update.
    }

    try {
      $update_manager->updateFieldStorageDefinition($definition);
      $updated[] = $field_name;
    }
    catch (\Exception $e) {
      // Ignore fields that cannot be updated automatically.
    }
  }

  return t('Base fields ensured for %entity. Created: @c Updated: @u', [
    '%entity' => $entity_type_id,
    '@c' => implode(', ', $created) ?: 'none',
    '@u' => implode(', ', $updated) ?: 'none',
  ]);
}

/**
 * Remove stray 'pid' column if it was previously added inadvertently.
 */
function sentinel_portal_entities_update_8002() {
  $table = 'sentinel_sample';
  $schema = \Drupal::database()->schema();
  if ($schema->fieldExists($table, 'pid')) {
    try {
      $schema->dropField($table, 'pid');
      return t('Dropped stray pid column from %table.', ['%table' => $table]);
    }
    catch (\Exception $e) {
      // If dropping fails, continue without fatal error.
      return t('Could not drop pid column from %table: @msg', ['%table' => $table, '@msg' => $e->getMessage()]);
    }
  }
  return t('No pid column to drop.');
}

/**
 * Implements hook_schema().
 */
function sentinel_portal_entities_schema() {
  $schema = [];
  // Already defined: sentinel_client
  $schema['sentinel_client'] = [
    'description' => 'Table to store user pack data.',
    'fields' => [
      'cid' => [
        'description' => 'Primary Key: The client entity id',
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'uid' => [
        'description' => 'The Drupal user ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ],
      'name' => [
        'description' => 'The client name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'email' => [
        'description' => 'The client email.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'api_key' => [
        'description' => 'The client API key.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
      'global_access' => [
        'description' => 'Should this key get global access to samples?',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ],
      'send_pending' => [
        'description' => 'Whether pending statuses should be sent back.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ],
      'ucr' => [
        'description' => 'The UCR number.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ],
      'company' => [
        'description' => 'The client company.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ],
      'created' => [
        'type' => 'datetime',
        'description' => 'When this record was created.',
        'mysql_type' => 'datetime',
        'not null' => FALSE,
      ],
      'updated' => [
        'type' => 'datetime',
        'description' => 'When this record was last updated.',
        'mysql_type' => 'datetime',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['cid'],
  ];

  // Add sentinel_sample_revision table if missing
  $schema['sentinel_sample_revision'] = [
    'description' => 'Revision table of sentinel_sample (matches main table)',
    'fields' => [
      'pid' => [ 'description' => 'Pack entity id', 'type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE ],
      'vid' => [ 'description' => 'Revision id', 'type' => 'serial', 'not null' => TRUE ],
      // Add other relevant sentinel_sample fields here. For brevity we only show the base keys; you should match D7 sentinel_sample schema as needed.
      // Duplicate all the fields from sentinel_sample. Omitting here for brevity.
    ],
    'primary key' => ['vid'],
    'indexes' => [
      'pidvid' => ['pid','vid'],
    ],
  ];
  // Add sentinel_notice table if missing
  $schema['sentinel_notice'] = [
    'description' => 'Table to store notice data.',
    'fields' => [
      'nid' => [ 'description' => 'Primary Key: The notice entity id', 'type' => 'serial', 'not null' => TRUE ],
      'uid' => [ 'description' => 'The Drupal user ID.', 'type' => 'int', 'not null' => FALSE ],
      'title' => [ 'description' => 'The title.', 'type' => 'varchar', 'length' => 255, 'not null' => TRUE ],
      'notice' => [ 'description' => 'The notice message.', 'type' => 'text', 'not null' => TRUE ],
      'notice_read' => [ 'description' => 'If this notice has been read.', 'type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'default' => 0, 'not null' => TRUE ],
      'created' => [ 'type' => 'datetime', 'description' => 'When this record was created.', 'mysql_type' => 'datetime', 'not null' => FALSE ],
    ],
    'primary key' => ['nid'],
    'indexes' => [
      'nid' => ['nid'],
    ],
  ];
  // Add sentinel_portal_queue table if missing
  $schema['sentinel_portal_queue'] = [
    'description' => 'Stores items in queues.',
    'fields' => [
      'item_id' => [ 'type' => 'serial', 'not null' => TRUE ],
      'queue' => [ 'type' => 'varchar', 'length' => 255, 'not null' => TRUE ],
      'data' => [ 'type' => 'blob', 'not null' => TRUE, 'size' => 'big' ],
      'expire' => [ 'type' => 'int', 'not null' => TRUE, 'default' => 0 ],
      'created' => [ 'type' => 'int', 'not null' => TRUE, 'default' => 0 ],
    ],
    'primary key' => ['item_id'],
    'indexes' => [ 'expire' => ['expire'] ],
  ];

  return $schema;
}


